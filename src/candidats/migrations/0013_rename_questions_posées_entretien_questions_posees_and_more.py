# Generated by Django 5.2.5 on 2025-09-02 23:38

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('candidats', '0012_alter_document_langue'),
        ('notes', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameField(
            model_name='entretien',
            old_name='questions_posées',
            new_name='questions_posees',
        ),
        migrations.RenameField(
            model_name='historicalentretien',
            old_name='questions_posées',
            new_name='questions_posees',
        ),
        migrations.RemoveField(
            model_name='candidature',
            name='evaluation_entretien',
        ),
        migrations.RemoveField(
            model_name='candidature',
            name='feedback_recruteur',
        ),
        migrations.RemoveField(
            model_name='candidature',
            name='type_entretien',
        ),
        migrations.RemoveField(
            model_name='historicalcandidature',
            name='evaluation_entretien',
        ),
        migrations.RemoveField(
            model_name='historicalcandidature',
            name='feedback_recruteur',
        ),
        migrations.RemoveField(
            model_name='historicalcandidature',
            name='type_entretien',
        ),
        migrations.AddField(
            model_name='candidature',
            name='date_entretien_prevue',
            field=models.DateTimeField(blank=True, null=True, verbose_name="Date prévue d'entretien"),
        ),
        migrations.AddField(
            model_name='candidature',
            name='entretien_planifie',
            field=models.BooleanField(default=False, verbose_name='Entretien planifié'),
        ),
        migrations.AddField(
            model_name='candidature',
            name='note_entretien',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='candidature_liee', to='notes.noteinterne'),
        ),
        migrations.AddField(
            model_name='candidature',
            name='type_entretien_prevue',
            field=models.CharField(blank=True, choices=[('TELEPHONIQUE', 'Téléphonique'), ('VIDEO', 'Vidéo'), ('PRESENTIEL', 'Présentiel')], max_length=20, null=True, verbose_name="Type d'entretien prévu"),
        ),
        migrations.AddField(
            model_name='evaluationentretien',
            name='commentaire_communication',
            field=models.TextField(blank=True, verbose_name='Commentaire communication'),
        ),
        migrations.AddField(
            model_name='evaluationentretien',
            name='commentaire_culture',
            field=models.TextField(blank=True, verbose_name='Commentaire fit culturel'),
        ),
        migrations.AddField(
            model_name='evaluationentretien',
            name='commentaire_motivation',
            field=models.TextField(blank=True, verbose_name='Commentaire motivation'),
        ),
        migrations.AddField(
            model_name='evaluationentretien',
            name='commentaire_technique',
            field=models.TextField(blank=True, verbose_name='Commentaire techniques'),
        ),
        migrations.AddField(
            model_name='historicalcandidature',
            name='date_entretien_prevue',
            field=models.DateTimeField(blank=True, null=True, verbose_name="Date prévue d'entretien"),
        ),
        migrations.AddField(
            model_name='historicalcandidature',
            name='entretien_planifie',
            field=models.BooleanField(default=False, verbose_name='Entretien planifié'),
        ),
        migrations.AddField(
            model_name='historicalcandidature',
            name='note_entretien',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='notes.noteinterne'),
        ),
        migrations.AddField(
            model_name='historicalcandidature',
            name='type_entretien_prevue',
            field=models.CharField(blank=True, choices=[('TELEPHONIQUE', 'Téléphonique'), ('VIDEO', 'Vidéo'), ('PRESENTIEL', 'Présentiel')], max_length=20, null=True, verbose_name="Type d'entretien prévu"),
        ),
        migrations.AlterField(
            model_name='candidature',
            name='statut',
            field=models.CharField(choices=[('POSTULE', 'Postulé'), ('RELANCE', 'Relancé'), ('ENTRETIEN', 'Entretien'), ('OFFRE', 'Offre reçue'), ('ACCEPTE', 'Accepté'), ('REFUSE', 'Refusé'), ('RETIRE', 'Retiré')], default='POSTULE', max_length=20),
        ),
        migrations.AlterField(
            model_name='entretien',
            name='feedback',
            field=models.TextField(blank=True, verbose_name='Feedback général'),
        ),
        migrations.AlterField(
            model_name='entretien',
            name='interlocuteurs',
            field=models.TextField(blank=True, verbose_name='Interlocuteur(s)'),
        ),
        migrations.AlterField(
            model_name='entretien',
            name='note_globale',
            field=models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Note globale/10'),
        ),
        migrations.AlterField(
            model_name='evaluationentretien',
            name='evaluateur',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Évaluateur'),
        ),
        migrations.AlterField(
            model_name='evaluationentretien',
            name='note_communication',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 - Insuffisant'), (2, '2 - En développement'), (3, '3 - Satisfaisant'), (4, '4 - Bon'), (5, '5 - Excellent')], null=True, verbose_name='Communication'),
        ),
        migrations.AlterField(
            model_name='evaluationentretien',
            name='note_culture',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 - Insuffisant'), (2, '2 - En développement'), (3, '3 - Satisfaisant'), (4, '4 - Bon'), (5, '5 - Excellent')], null=True, verbose_name='Fit culturel'),
        ),
        migrations.AlterField(
            model_name='evaluationentretien',
            name='note_motivation',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 - Insuffisant'), (2, '2 - En développement'), (3, '3 - Satisfaisant'), (4, '4 - Bon'), (5, '5 - Excellent')], null=True, verbose_name='Motivation'),
        ),
        migrations.AlterField(
            model_name='evaluationentretien',
            name='note_technique',
            field=models.PositiveIntegerField(blank=True, choices=[(1, '1 - Insuffisant'), (2, '2 - En développement'), (3, '3 - Satisfaisant'), (4, '4 - Bon'), (5, '5 - Excellent')], null=True, verbose_name='Compétences techniques'),
        ),
        migrations.AlterField(
            model_name='historicalcandidature',
            name='statut',
            field=models.CharField(choices=[('POSTULE', 'Postulé'), ('RELANCE', 'Relancé'), ('ENTRETIEN', 'Entretien'), ('OFFRE', 'Offre reçue'), ('ACCEPTE', 'Accepté'), ('REFUSE', 'Refusé'), ('RETIRE', 'Retiré')], default='POSTULE', max_length=20),
        ),
        migrations.AlterField(
            model_name='historicalentretien',
            name='feedback',
            field=models.TextField(blank=True, verbose_name='Feedback général'),
        ),
        migrations.AlterField(
            model_name='historicalentretien',
            name='interlocuteurs',
            field=models.TextField(blank=True, verbose_name='Interlocuteur(s)'),
        ),
        migrations.AlterField(
            model_name='historicalentretien',
            name='note_globale',
            field=models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Note globale/10'),
        ),
    ]
